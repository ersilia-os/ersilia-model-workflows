name: Test model image

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

jobs:
  test-image:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Set up python
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Set up miniconda
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      #bugfix to just install ersilia normally not with the playground
      - name: Install dependencies
        run: |
          conda run -n base conda install git-lfs -c conda-forge
          conda run -n base git-lfs install
          conda run -n base conda install gh -c conda-forge
          conda run -n base python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'
      
      # Checkout ersilia so we can run the testing playground
      # - name: Checkout ersilia
      #  uses: actions/checkout@v4.2.2
      #  with:
      #   repository: ersilia-os/ersilia
      #    ref: master
      #    path: ersilia
      
      # Install ersilia with the test extra
      #- name: Install ersilia
      #  run: |
      #    python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'

      - name: Run the test playground
        id: test-playground
        continue-on-error: true
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: | # mock test
          conda run -n base bash -c "
          ersilia -v fetch $MODEL_ID --from_dockerhub &&
          ersilia serve $MODEL_ID &&
          ersilia example -f input.csv -n 3 &&
          ersilia run -i input.csv -o output.csv &&
          ersilia close &&
          ersilia delete $MODEL_ID &&
          head output.csv
          "
      #  env:
      #    MODEL: ${{ github.event.repository.name }}
      #    TAG: ${{ inputs.tag }}
      #  run: |
      #    cd ersilia/test/playground
      #    nox -s execute -- --single $MODEL --cli fetch test --fetch from_dockerhub version dev --test deep
      
      # We will parse the log to see if the test passed
      #- name: Parse log
      #  run: |
      #    cat log.txt

      # Store architecture information
      # If test-playground succeeds we save amd if run on ubuntu, arm if run on macos
      - name: Store architecture information
        id: architecture
        if: steps.test-playground.outcome == 'success'
        run: |
          if [[ ${{ matrix.platform }} == 'ubuntu-latest' ]]; then
            echo "success" > amd.txt
          elif [[ ${{ matrix.platform }} == 'macos-latest' ]]; then
            echo "success" > arm.txt
          fi

      - name: list files
        run: |
          ls -lah
      # Upload architecture information
      - name: Upload architecture artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}
          retention-days: 14
          path: |
            *.txt


  retag-image:
    needs: test-image
    if: ${{ needs.test-image.result != 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download architecture information (Ubuntu)
        continue-on-error: true  # Allow the step to continue even if the artifact is missing
        uses: actions/download-artifact@v4
        with:
          name: build-logs-ubuntu-latest
          path: logs  # Store inside logs directory

      - name: Download architecture information (MacOS)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-logs-macos-latest
          path: logs  # Store inside logs directory

      - name: List downloaded files
        run: ls -lah logs  # Print contents to debug

      - name: Move only architecture files
        run: |
          [[ -f logs/amd.txt ]] && mv logs/amd.txt .
          [[ -f logs/arm.txt ]] && mv logs/arm.txt .
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # If either amd.txt or arm.txt files exist, we tag the image with date and as latest
      - name: Check architecture information
        id: architecture-info
        env:
          MODEL: ${{ github.event.repository.name }}
        run: |
            if [[ -f amd.txt || -f arm.txt ]]; then
              echo "Tagging image with date and as latest"
              docker pull ersiliaos/${{ github.event.repository.name }}:dev
              docker tag ersiliaos/$MODEL:dev ersiliaos/$MODEL:$(date +%Y-%m-%d)
              docker tag ersiliaos/$MODEL:dev ersiliaos/$MODEL:latest
              docker push ersiliaos/$MODEL:$(date +%Y-%m-%d) && docker push ersiliaos/$MODEL:latest
            else
              echo "Image test failed, keeping the dev tag"
              exit 1
            fi

      - name: Determine Architecture and Save to arch.txt
        run: |
          ARCH=""
          if [[ -f amd.txt ]]; then
            ARCH="AMD64"
          fi
          if [[ -f arm.txt ]]; then
            if [[ -n "$ARCH" ]]; then
              ARCH="$ARCH,ARM64"
            else
              ARCH="ARM64"
            fi
          fi
          echo "$ARCH" > arch.txt
          cat arch.txt 
      
      - name: Save pack method
        id: save-pack-method
        if: steps.architecture-info.outcome == 'success'
        run: |
          echo "FastAPI" > pack_method.txt


      - name: Upload metadata txt files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: architecture-info
          path: |
            arch.txt
            pack_method.txt
