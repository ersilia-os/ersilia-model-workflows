name: Post model upload actions

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"
      repo_name:
        required: true
        type: string
    secrets:
      AIRTABLE_API_KEY:
        required: true
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
jobs:
  post-model-upload:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download architecture file
        uses: actions/download-artifact@v4
        with:
          name: architecture
          path: .

      - name: Download pack method file
        uses: actions/download-artifact@v4
        with:
          name: pack-method
          path: .
      
      - name: Print architecture and pack method
        run: |
          cat arch.txt
          cat pack_method.txt

      - name: Download amd64 test results
        uses: actions/download-artifact@v4
        with:
          name: test-report-amd64
          path: .

      - name: Extract report numbers
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          JSON_FILE="./${MODEL_ID}-test-amd64.json"
          export COMPUTATIONAL_PERFORMANCE_1=$(jq -r '.computational_performance_summary.computational_performance_tracking_details.pred_1' $JSON_FILE)
          export COMPUTATIONAL_PERFORMANCE_10=$(jq -r '.computational_performance_summary.computational_performance_tracking_details.pred_10' $JSON_FILE)
          export COMPUTATIONAL_PERFORMANCE_100=$(jq -r '.computational_performance_summary.computational_performance_tracking_details.pred_100' $JSON_FILE)
          echo "COMPUTATIONAL_PERFORMANCE_1=${COMPUTATIONAL_PERFORMANCE_1}" >> $GITHUB_ENV
          echo "COMPUTATIONAL_PERFORMANCE_10=${COMPUTATIONAL_PERFORMANCE_10}" >> $GITHUB_ENV
          echo "COMPUTATIONAL_PERFORMANCE_100=${COMPUTATIONAL_PERFORMANCE_100}" >> $GITHUB_ENV

      - name: Check metadata file
        id: checkMetadata
        continue-on-error: true
        run: |
          if [[ ! -f metadata.yml ]]; then
            echo "metadata.yml file not found"
            exit 1
          fi

      - name: Update Metadata YAML file with DockerHub info
        id: updateMetadataYAML
        if: steps.checkMetadata.outcome == 'success'
        run: |
          python3 -c "
          import yaml
          with open('metadata.yml', 'r') as f:
            data = yaml.safe_load(f)
          print(data)
          with open('arch.txt', 'r') as f:
            arch = f.read().rstrip()
            arch = arch.split(',')
          data['DockerHub'] = 'https://hub.docker.com/r/ersiliaos/{0}'.format(data['Identifier'])
          data['Docker Architecture'] = arch
          with open('pack_method.txt', 'r') as f:
            pack_method = f.read().rstrip()
          data['Docker Pack Method'] = pack_method
          data['Computational Performance 1'] = ${{ env.COMPUTATIONAL_PERFORMANCE_1 }}
          data['Computational Performance 10'] = ${{ env.COMPUTATIONAL_PERFORMANCE_10 }}
          data['Computational Performance 100'] = ${{ env.COMPUTATIONAL_PERFORMANCE_100 }}
          with open('metadata.yml', 'w') as f:
            yaml.dump(data, f, default_flow_style=False, sort_keys=False)
          "
          rm arch.txt
          rm pack_method.txt

      - name: Update Metadata JSON file with DockerHub info
        id: updateMetadataJSON
        if: steps.checkMetadata.outcome == 'failure'
        run: |
          python3 -c "
          import json
          with open('metadata.json', 'r') as f:
            data = json.load(f)
          print(data)
          with open('arch.txt', 'r') as f:
            arch = f.read().rstrip()
            arch = arch.split(',')
          data['DockerHub'] = 'https://hub.docker.com/r/ersiliaos/{0}'.format(data['Identifier'])
          data['Docker Architecture'] = arch
          with open('pack_method.txt', 'r') as f:
            pack_method = f.read().rstrip()
          data['Docker Pack Method'] = pack_method
          data['Computational Performance 1'] = ${{ env.COMPUTATIONAL_PERFORMANCE_1 }}
          data['Computational Performance 10'] = ${{ env.COMPUTATIONAL_PERFORMANCE_10 }}
          data['Computational Performance 100'] = ${{ env.COMPUTATIONAL_PERFORMANCE_100 }}
          with open('metadata.json', 'w') as f:
            json.dump(data, f, indent=4)
          "
          rm arch.txt
          rm pack_method.txt
      
          
      - name: Commit and push changes done to the Metadata file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating metadata [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Setup conda
      - name: Setup conda
        id: setupConda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
  
      # Install ersilia
      - name: Install dependencies in Conda environment
        id: installDependenciesInConda
        run: |
          conda run -n base conda install gh -c conda-forge
          conda run -n base python -m pip install git+https://github.com/ersilia-os/ersilia.git

      - name: Update metadata to AirTable
        id: update-metadata-to-airtable
        env:
          USER_NAME: ${{ github.repository_owner }}
          BRANCH: "main"
          REPO_NAME: ${{ github.event.repository.name }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        run: |
          conda run -n base pip install requests pyairtable
          echo "Updating metadata to AirTable looking at owner: $USER_NAME"
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/readme_formatter.py
          conda run -n base python3 airtableops.py airtable-update --user $USER_NAME --repo $REPO_NAME --branch $BRANCH --api-key $AIRTABLE_API_KEY
          rm airtableops.py
          rm readme_formatter.py
  
      - name: sync metadata to S3 JSON
        id: sync-metadata-to-s3
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/convert_airtable_to_json.py
          conda run -n base pip install boto3 requests pyairtable
          conda run -n base python convert_airtable_to_json.py $AIRTABLE_API_KEY $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
          rm convert_airtable_to_json.py

      - name: Update README file
        id: update-readme-file
        env:
          MODEL_ID: ${{ github.event.repository.name }}
        run: |
          echo "Updating README file with AirTable metadata for model: $MODEL_ID"
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/readme_formatter.py
          conda run -n base python3 airtableops.py readme-update --repo $MODEL_ID --path .
          rm airtableops.py
          rm readme_formatter.py
          less README.md

      - name: Commit and push changes done to the README file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating readme [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ersiliaos/${{ github.event.repository.name }}
          short-description: "Ersilia Model Hub Identifier: ${{ github.event.repository.name }}"
