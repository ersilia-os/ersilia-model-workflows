name: Model test on push

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"
      repo_name:
        required: true
        type: string
    secrets:
      AIRTABLE_API_KEY:
        required: true
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  model-test:
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - uses: actions/checkout@v4.2.2
        with:
          lfs: true
          
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      - name: Install dependencies
        run: |
          conda run -n base git-lfs install
          conda run -n base conda install gh -c conda-forge
          conda run -n base python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'

      - name: Select correct metadata file
        run: |
          if [ -f "metadata.yml" ]; then
            metadata="metadata.yml"
          elif [ -f "metadata.json" ]; then
            metadata="metadata.json"
          else
            echo "No metadata file found."
            exit 1
          fi
          echo "METADATA_FILE=$metadata" >> "$GITHUB_ENV"
          echo "Found metadata file: $metadata"

      - name: Decide metadata upate to/from Airtable
        run: |
          if [[ "$METADATA_FILE" == "metadata.json" ]]; then
            output_consistency=$(jq -r '.["Output Consistency"] // empty' "$METADATA_FILE")
          elif [[ "$METADATA_FILE" == "metadata.yml" ]]; then
            output_consistency=$(yq e '.["Output Consistency"] // ""' "$METADATA_FILE")
          fi

          if [ -n "$output_consistency" ]; then
            echo "'Output Consistency' exists and has value: $output_consistency"
            echo "Updating metadata **TO** Airtable."
            echo "AIRTABLE_ACTION=TO" >> "$GITHUB_ENV"
          else
            echo "'Output Consistency' is missing or empty in $METADATA_FILE."
            echo "Updating metadata **FROM** Airtable."
            echo "AIRTABLE_ACTION=FROM" >> "$GITHUB_ENV"
          fi


      - name: Update metadata to or from AirTable
        env:
          USER_NAME: ${{ github.repository_owner }}
          BRANCH: ${{ inputs.branch }}
          REPO_NAME: ${{ inputs.repo_name }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            set -e  # Ensure failure stops execution
            conda run -n base pip install requests pyairtable
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/readme_formatter.py

            if [[ "$AIRTABLE_ACTION" == "TO" ]]; then
              echo "Updating metadata to AirTable looking at owner: $USER_NAME"
              echo "Metadata Content"
              cat "$METADATA_FILE"
              conda run -n base python3 airtableops.py airtable-update --user $USER_NAME --repo $REPO_NAME --branch $BRANCH --api-key $AIRTABLE_API_KEY
            elif [[ "$AIRTABLE_ACTION" == "FROM" ]]; then
              echo "Updating metadata from AirTable looking at owner: $USER_NAME"
              conda run -n base python3 airtableops.py metadata-update --repo $REPO_NAME --path . --api-key $AIRTABLE_API_KEY
            fi

            # remove file
            rm airtableops.py
            rm readme_formatter.py

      - name: Commit and push changes done to the Metadata file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating metadata [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync metadata to S3 JSON
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/convert_airtable_to_json.py
          conda run -n base pip install boto3 requests pyairtable
          conda run -n base python convert_airtable_to_json.py $AIRTABLE_API_KEY $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
          rm convert_airtable_to_json.py

      - name: Update README file
        id: update-readme-file
        env:
          MODEL_ID: ${{ github.event.repository.name }}
        run: |
          conda run -n base bash -c "
            echo 'Updating README file with AirTable metadata for model: $MODEL_ID' &&
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py &&
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/readme_formatter.py &&
            python3 airtableops.py readme-update --repo $MODEL_ID --path . &&
            rm airtableops.py &&
            rm readme_formatter.py &&
            less README.md
          "

      - name: Commit and push changes done to the README file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating metadata [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch model and run #TODO change for test command 
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          conda run -n base bash -c "
            ersilia -v fetch $MODEL_ID --from_github &&
            ersilia serve $MODEL_ID &&
            ersilia example -f input.csv -n 3 &&
            ersilia run -i input.csv -o output.csv &&
            ersilia close &&
            ersilia delete $MODEL_ID &&
            head output.csv
          "

      - name: Upload log output
        if: always()
        uses: actions/upload-artifact@v4.5.0
        with:
          name: debug-logs
          retention-days: 14
          path: |
            /home/runner/eos/*.log
            ./*.log
