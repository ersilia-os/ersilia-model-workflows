name: Test model image

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

jobs:
  test-image-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      # Checkout ersilia so we can run the testing playground
      - name: Checkout ersilia
        uses: actions/checkout@v4.2.2
        with:
          repository: ersilia-os/ersilia
          ref: master
          path: ersilia
      
      # Install ersilia with the test extra
      - name: Install ersilia
        run: |
          python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'

      - name: Run the test playground
        id: test-playground
        env:
          MODEL: ${{ github.event.repository.name }}
          TAG: ${{ inputs.tag }}
        run: |
          cd ersilia/test/playground
          nox -s execute -- --single $MODEL --cli fetch --fetch from_dockerhub version dev-amd64

  test-image-arm64:
    runs-on: default-linux-arm64
    steps:
      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      # Checkout ersilia so we can run the testing playground
      - name: Checkout ersilia
        uses: actions/checkout@v4.2.2
        with:
          repository: ersilia-os/ersilia
          ref: master
          path: ersilia
      
      # Install ersilia with the test extra
      - name: Install ersilia
        run: |
          python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'

      - name: Run the test playground
        id: test-playground
        env:
          MODEL: ${{ github.event.repository.name }}
          TAG: ${{ inputs.tag }}
        run: |
          cd ersilia/test/playground
          nox -s execute -- --single $MODEL --cli fetch --fetch from_dockerhub version dev-arm64
      
  retag-image:
    runs-on: ubuntu-latest
    needs: [test-image-amd64, test-image-arm64]
    steps:
      - name: Check if AMD successful
        if: ${{ needs.test-image-amd64.result == 'success' }}
        run: |
          echo "AMD64" > amd.txt
      
      - name: Check if ARM successful
        if: ${{ needs.test-image-arm64.result == 'success' }}
        run: |
          echo "ARM64" > arm.txt
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # If either amd.txt or arm.txt files exist, we tag the image with date and as latest
      - name: Check architecture information
        id: architecture-info
        env:
          MODEL: ${{ github.event.repository.name }}
        run: |
            if [[ -f amd.txt || -f arm.txt ]]; then
              echo "Tagging image with date and as latest"
              docker pull ersiliaos/${{ github.event.repository.name }}:dev
              docker tag ersiliaos/$MODEL:dev ersiliaos/$MODEL:$(date +%Y-%m-%d)
              docker tag ersiliaos/$MODEL:dev ersiliaos/$MODEL:latest
              docker push ersiliaos/$MODEL:$(date +%Y-%m-%d) && docker push ersiliaos/$MODEL:latest
            else
              echo "Image test failed, keeping the dev tag"
              exit 1
            fi

      - name: Determine Architecture and Save to arch.txt
        run: |
          ARCH=""
          if [[ -f amd.txt ]]; then
            ARCH="AMD64"
          fi
          if [[ -f arm.txt ]]; then
            if [[ -n "$ARCH" ]]; then
              ARCH="$ARCH,ARM64"
            else
              ARCH="ARM64"
            fi
          fi
          echo "$ARCH" > arch.txt
          cat arch.txt 
      
      - name: Save pack method
        id: save-pack-method
        if: steps.architecture-info.outcome == 'success'
        run: |
          echo "FastAPI" > pack_method.txt


      - name: Upload metadata txt files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: architecture-info
          path: |
            arch.txt
            pack_method.txt
