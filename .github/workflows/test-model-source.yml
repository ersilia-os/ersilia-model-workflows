name: Model test on push

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"
      repo_name:
        required: true
        type: string
    secrets:
      AIRTABLE_API_KEY:
        required: true
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  model-test:
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - uses: actions/checkout@v4.2.2
        with:
          lfs: true
          
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      - name: Install dependencies
        run: |
          conda run -n base git-lfs install
          conda run -n base conda install gh -c conda-forge
          conda run -n base python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'

      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo snap install yq

      - name: Select correct metadata file
        run: |
          if [ -f "metadata.yml" ]; then
            metadata="metadata.yml"
          elif [ -f "metadata.json" ]; then
            metadata="metadata.json"
          else
            echo "No metadata file found."
            exit 1
          fi
          echo "METADATA_FILE=$metadata" >> "$GITHUB_ENV"
          echo "Found metadata file: $metadata"

      - name: Add creation date to metadata
        env:
          USER_NAME: ${{ github.repository_owner }}
          BRANCH: ${{ inputs.branch }}
          REPO_NAME: ${{ inputs.repo_name }}
          METADATA_FILE: ${{ env.METADATA_FILE }}
        run: |
          echo "Using repo: $USER_NAME/$REPO_NAME"
          echo "Target metadata file: $METADATA_FILE"

          # Get creation date via GitHub API
          CREATED_AT=$(curl -s "https://api.github.com/repos/$USER_NAME/$REPO_NAME" | jq -r '.created_at')

          # Convert to d/m/Y format
          INCORP_DATE=$(date -d "$CREATED_AT" +"%-d/%-m/%Y")

          echo "Incorporation Date: $INCORP_DATE"

          # Detect file type
          EXT="${METADATA_FILE##*.}"

          if [[ "$EXT" == "json" ]]; then
            jq --arg date "$INCORP_DATE" '.["Incorporation Date"] = $date' "$METADATA_FILE" > tmp && mv tmp "$METADATA_FILE"
          elif [[ "$EXT" == "yml" || "$EXT" == "yaml" ]]; then
            yq -i ".\"Incorporation Date\" = \"$INCORP_DATE\"" "$METADATA_FILE"
          else
            echo "❌ Unsupported metadata file type: $METADATA_FILE"
            exit 1
          fi

      - name: Decide metadata upate to/from Airtable
        run: |
          if [[ "$METADATA_FILE" == "metadata.json" ]]; then
            output_consistency=$(jq -r '.["Output Consistency"] // empty' "$METADATA_FILE")
          elif [[ "$METADATA_FILE" == "metadata.yml" ]]; then
            output_consistency=$(yq e '.["Output Consistency"] // ""' "$METADATA_FILE")
          fi

          if [ -n "$output_consistency" ]; then
            echo "'Output Consistency' exists and has value: $output_consistency"
            echo "Updating metadata **TO** Airtable."
            echo "AIRTABLE_ACTION=TO" >> "$GITHUB_ENV"
          else
            echo "'Output Consistency' is missing or empty in $METADATA_FILE."
            echo "Updating metadata **FROM** Airtable."
            echo "AIRTABLE_ACTION=FROM" >> "$GITHUB_ENV"
          fi

      - name: Update metadata to or from AirTable
        env:
          USER_NAME: ${{ github.repository_owner }}
          BRANCH: ${{ inputs.branch }}
          REPO_NAME: ${{ inputs.repo_name }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            set -e  # Ensure failure stops execution
            conda run -n base pip install requests pyairtable
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/readme_formatter.py

            if [[ "$AIRTABLE_ACTION" == "TO" ]]; then
              echo "Updating metadata to AirTable looking at owner: $USER_NAME"
              echo "Metadata Content"
              cat "$METADATA_FILE"
              conda run -n base python3 airtableops.py airtable-update --user $USER_NAME --repo $REPO_NAME --branch $BRANCH --api-key $AIRTABLE_API_KEY
            elif [[ "$AIRTABLE_ACTION" == "FROM" ]]; then
              echo "Updating metadata from AirTable looking at owner: $USER_NAME"
              conda run -n base python3 airtableops.py metadata-update --repo $REPO_NAME --path . --api-key $AIRTABLE_API_KEY
            fi

            # remove file
            rm airtableops.py
            rm readme_formatter.py

      - name: Commit and push changes done to the Metadata file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating metadata [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync metadata to S3 JSON
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/convert_airtable_to_json.py
          conda run -n base pip install boto3 requests pyairtable
          conda run -n base python convert_airtable_to_json.py $AIRTABLE_API_KEY $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
          rm convert_airtable_to_json.py

      - name: Update README file
        id: update-readme-file
        env:
          MODEL_ID: ${{ github.event.repository.name }}
        run: |
          conda run -n base bash -c "
            echo 'Updating README file with AirTable metadata for model: $MODEL_ID' &&
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py &&
            wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/readme_formatter.py &&
            python3 airtableops.py readme-update --repo $MODEL_ID --path . &&
            rm airtableops.py &&
            rm readme_formatter.py &&
            less README.md
          "

      - name: Commit and push changes done to the README file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating metadata [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Test model from GitHub
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          conda run -n base bash -c "
            ersilia -v test $MODEL_ID --shallow --from_github
          "
          cat $MODEL_ID-test.json

      - name: Parse test results
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          TEST_JSON="${MODEL_ID}-test.json"

          if [[ ! -f "$TEST_JSON" ]]; then
            echo "Error: Test results file $TEST_JSON not found!"
            exit 1
          fi

          echo "Parsing test results from $TEST_JSON"

          TEST_FAILED=$(jq 'recurse | objects | select(map(select(. == false)) | length > 0)' "$TEST_JSON")
              if [[ -n "$TEST_FAILED" ]]; then
                echo "❌ Some tests failed. Stopping workflow."
                exit 1
              fi

          ENV_SIZE=$(jq '.model_size_check.environment_size_mb' "$TEST_JSON")
          DIR_SIZE=$(jq '.model_size_check.directory_size_mb' "$TEST_JSON")
          echo "Environment size: $ENV_SIZE MB"
          echo "Directory size: $DIR_SIZE MB"
          echo "Environment size (MB): $ENV_SIZE" > model_sizes.txt
          echo "Directory size (MB): $DIR_SIZE" >> model_sizes.txt
          cat model_sizes.txt
          cat $TEST_JSON

      - name: Upload files
        if: always()
        uses: actions/upload-artifact@v4.5.0
        with:
          name: model_sizes
          retention-days: 14
          path: |
            ${{ inputs.repo_name }}-test.json
            model_sizes.txt
